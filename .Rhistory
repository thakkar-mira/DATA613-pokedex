)
),
tabPanel("Data Table", dataTableOutput("dynamic"))
)))
server <- function(input, output) {
output$markdown <- renderUI({
includeMarkdown("markdown.md")
})
x <- reactive({
pokemon[,input$xcol]
})
y <- reactive({
pokemon[,input$ycol]
})
output$scatterplots <- renderPlotly({
plot_ly(pokemon, x = x(), y = y(), color = Name,  type = "scatter", mode = "markers")
})
c_id <- reactive({
shiny::validate(
shiny::need(input$pokemon, "Select a Pokémon!")
)
pokemon[pokemon$Name == input$pokemon, "ID"]
})
c_url <- reactive({
paste0("https://serebii.net/swordshield/pokemon/small/", c_id(), ".png")
})
output$image <- renderUI({
tags$img(src = c_url())
})
output$dynamic <- renderDataTable({
diamonds1
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
theme = bs_theme(version = 4, "journal"),
titlePanel("Generation I Pokédex"),
img(src="pokedex.png", align = "right"),
mainPanel(
tabsetPanel(type = "tab",
tabPanel("Welcome!",
uiOutput("markdown")),
tabPanel("Poké-Scatterplots",
sidebarPanel(
selectInput("xcol", "X Variable", choices = names(pokemon)),
selectInput("ycol", "Y Variable", choices = names(pokemon)),
),
plotlyOutput(outputId = "scatterplots")),
tabPanel("Poké-Pics",
sidebarPanel(
selectInput("pokemon", "Pokémon",
choices = c("Enter a Pokémon..." = "", ID_num))),
mainPanel(
uiOutput("image")
)
),
tabPanel("Data Table", dataTableOutput("dynamic"))
)))
server <- function(input, output) {
output$markdown <- renderUI({
includeMarkdown("markdown.md")
})
x <- reactive({
pokemon[,input$xcol]
})
y <- reactive({
pokemon[,input$ycol]
})
output$scatterplots <- renderPlotly({
plot_ly(pokemon, x = x(), y = y(), color = Name,  type = "scatter", mode = "markers")
})
c_id <- reactive({
shiny::validate(
shiny::need(input$pokemon, "Select a Pokémon!")
)
pokemon[pokemon$Name == input$pokemon, "ID"]
})
c_url <- reactive({
paste0("https://serebii.net/swordshield/pokemon/small/", c_id(), ".png")
})
output$image <- renderUI({
tags$img(src = c_url())
})
output$dynamic <- renderDataTable({
diamonds1
})
}
shinyApp(ui = ui, server = server)
setwd("C:/Users/chrtm/Desktop/DATA613/RShiny Project")
runApp()
runApp()
theme = bs_theme(version = 4, "sketchy")
help("bs_theme")
runApp()
runApp()
runApp()
help("imageOutput")
runApp()
View(pokemon)
View(pokemon)
pokemon
#for normal and shiny images
pokemon3 <- pokemon
pokemon3$Name <- tolower(pokemon3$Name)
pokemon3
runApp()
View(pokemon3)
runApp()
pokemon$Name <- tolower(pokemon$Name)
pokemon
runApp()
library(tidyverse)
library(rvest)
library(repurrrsive)
library(shiny)
library(shinyWidgets)
library(plotly)
library(bslib)
library(markdown)
View(pokemon)
runApp()
library(tidyverse)
library(rvest)
library(repurrrsive)
library(shiny)
library(shinyWidgets)
library(plotly)
library(bslib)
library(markdown)
Link <- "https://pokemondb.net/pokedex/stats/gen1"
page = read_html(Link)
Name = page%>% html_nodes(".cell-name")%>%
html_text()
page = read_html(Link)
Type = page%>% html_nodes(".cell-icon")%>%
html_text()
page = read_html(Link)
Total = page%>% html_nodes(".cell-total")%>%
html_text()
page = read_html(Link)
Attack = page%>% html_nodes(".cell-num:nth-child(6)")%>%
html_text()
page = read_html(Link)
Defense = page%>% html_nodes(".cell-num:nth-child(7)")%>%
html_text()
page = read_html(Link)
Speed = page%>% html_nodes(".cell-num:nth-child(10)")%>%
html_text()
page = read_html(Link)
SpAtk = page %>% html_nodes(".cell-num:nth-child(8)")%>%
html_text()
page = read_html(Link)
SpDef = page %>% html_nodes(".cell-num:nth-child(9)")%>%
html_text()
pokemondataframe_g1 = data.frame(Name, Type, Total, Attack, Defense, SpAtk, SpDef, Speed)
as_tibble(pokemondataframe_g1)
#recode character variables to doubles because they are continuous, numerical variables
pokemon_df_clean <- pokemondataframe_g1 %>%
mutate(Total = as.numeric(Total),
Attack = as.numeric(Attack),
Defense = as.numeric(Defense),
Speed = as.numeric(Speed),
SpAtk = as.numeric(SpAtk),
SpDef = as.numeric(SpDef))
#parse pokemon with two types into two columns
pokemon_df_clean$Type <- gsub("(?!^)(?=[[:upper:]])", ".", pokemon_df_clean$Type, perl=T)
pokemon <- pokemon_df_clean %>% separate(Type, c("Primary_Type", "Secondary_Type"), extra = "merge", fill = "right")
#recode the types as factors so ggplot will read them correctly
pokemontypes <- c("Grass", "Poison", "Fire", "Flying", "Water", "Bug", "Normal", "Electric", "Ground", "Fighting", "Fairy", "Psychic", "Rock", "Steel", "Ice", "Ghost", "Dragon")
pokemon$Primary_Type <- factor(pokemon$Primary_Type, levels = pokemontypes)
pokemon$Secondary_Type <- factor(pokemon$Secondary_Type, levels = pokemontypes)
ID_no <- c(1:151)
ID <- formatC(ID_no, width = 3, format = "d", flag = "0")
pokemon$ID <- ID
pokemon$Name <- tolower(pokemon$Name)
pokemon
View(pokemon)
runApp()
ui <- fluidPage(
theme = bs_theme(version = version_default(), "vapor"),
titlePanel("Generation I Pokédex"),
img(src="pokedex.png", align = "right"),
mainPanel(
tabsetPanel(type = "tab",
tabPanel("Welcome!",
uiOutput("markdown")),
tabPanel("Poké-Scatterplots",
sidebarPanel(
selectInput("xcol", "X Variable", choices = names(pokemon)),
selectInput("ycol", "Y Variable", choices = names(pokemon)),
),
plotlyOutput(outputId = "scatterplots")
),
tabPanel("Poké-Pics",
mainPanel(
fluidRow(
column(5,
selectInput("npokemon", "Normal Pokémon",
choices = c("Select a Pokémon..." = "", Name)),
uiOutput("normalimage")),
column(5,
selectInput("spokemon", "Shiny Pokémon",
choices = c("Select a Pokémon..." = "", Name)),
uiOutput("shinyimage"))
),
)),
tabPanel("Data Table", dataTableOutput("dynamic"))
)))
server <- function(input, output) {
output$markdown <- renderUI({
includeMarkdown("markdown.md")
})
x <- reactive({
pokemon[,input$xcol]
})
y <- reactive({
pokemon[,input$ycol]
})
output$scatterplots <- renderPlotly({
plot_ly(pokemon, x = x(), y = y(), color = Name,  type = "scatter", mode = "markers")
})
n_id <- reactive({
shiny::validate(
shiny::need(input$npokemon, "Select a Pokémon to see what it looks like!")
)
pokemon[pokemon$Name == input$npokemon, "name"]
})
n_url <- reactive({
paste0("https://img.pokemondb.net/sprites/home/normal/2x/", n_id(), ".jpg")
})
output$normalimage <- renderUI({
tags$img(src = n_url())
})
s_id <- reactive({
shiny::validate(
shiny::need(input$spokemon, "Select a Pokémon to see what it looks like!")
)
pokemon[pokemon$Name == input$spokemon, "name"]
})
s_url <- reactive({
paste0("https://img.pokemondb.net/sprites/home/shiny/2x/", s_id(), ".jpg")
})
output$shinyimage <- renderUI({
tags$img(src = s_url())
})
output$dynamic <- renderDataTable({
diamonds1
})
}
shinyApp(ui = ui, server = server)
n_id <- reactive({
shiny::validate(
shiny::need(input$pokemons, "Select a Pokémon to see its normal form!")
)
pokemon[pokemon$Name == tolower(input$npokemon), "Name"]
})
n_url <- reactive({
paste0("https://img.pokemondb.net/sprites/home/normal/2x/", n_id(), ".jpg")
})
ui <- fluidPage(
theme = bs_theme(version = version_default(), "vapor"),
titlePanel("Generation I Pokédex"),
img(src="pokedex.png", align = "right"),
mainPanel(
tabsetPanel(type = "tab",
tabPanel("Welcome!",
uiOutput("markdown")),
tabPanel("Poké-Scatterplots",
sidebarPanel(
selectInput("xcol", "X Variable", choices = names(pokemon)),
selectInput("ycol", "Y Variable", choices = names(pokemon)),
),
plotlyOutput(outputId = "scatterplots")
),
tabPanel("Poké-Pics",
fluidRow(
column(5,
selectInput("pokemons", "Normal Pokémon",
choices = pokemon$Name),
uiOutput("normalimage")),
column(5,
selectInput("spokemon", "Shiny Pokémon",
choices = pokemon$Name),
uiOutput("shinyimage"))
),
),
tabPanel("Data Table", dataTableOutput("dynamic"))
)))
server <- function(input, output) {
output$markdown <- renderUI({
includeMarkdown("markdown.md")
})
x <- reactive({
pokemon[,input$xcol]
})
y <- reactive({
pokemon[,input$ycol]
})
output$scatterplots <- renderPlotly({
plot_ly(pokemon, x = x(), y = y(), color = Name,  type = "scatter", mode = "markers")
})
n_id <- reactive({
shiny::validate(
shiny::need(input$pokemons, "Select a Pokémon to see its normal form!")
)
pokemon[pokemon$Name == tolower(input$npokemon), "Name"]
})
n_url <- reactive({
paste0("https://img.pokemondb.net/sprites/home/normal/2x/", n_id(), ".jpg")
})
output$normalimage <- renderUI({
tags$img(src = n_url())
})
s_id <- reactive({
shiny::validate(
shiny::need(input$spokemon, "Select a Pokémon to see its shiny form!")
)
pokemon[pokemon$Name == tolower(input$spokemon), "Name"]
})
s_url <- reactive({
paste0("https://img.pokemondb.net/sprites/home/shiny/2x/", s_id(), ".jpg")
})
output$shinyimage <- renderUI({
tags$img(src = s_url())
})
output$dynamic <- renderDataTable({
diamonds1
})
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
ui <- fluidPage(
theme = bs_theme(version = version_default(), "vapor"),
titlePanel("Generation I Pokédex"),
img(src = "charmeleon.gif", height = 100, width = 100),
img(src = "pikarun.gif", height = 100, width = 100),
img(src = "bulbasaur.gif", height = 100, width = 100),
mainPanel(
tabsetPanel(type = "tab",
tabPanel("Welcome!",
uiOutput("markdown"),
img(src = "pikachu.png", align = "bottom", height = 100, width = 100)),
tabPanel("Poké-Plots",
sidebarPanel(
selectInput("xcol", "X Variable", choices = names(pokemon)),
selectInput("ycol", "Y Variable", choices = names(pokemon)),
),
plotlyOutput(outputId = "scatterplots")
),
tabPanel("Poké-Pics",
fluidRow(
column(5,
selectInput("ppokemon", "Normal Pokémon",
choices = c("select a pokémon..." = "", pokemon$Name)),
uiOutput("normalimage")),
column(5,
selectInput("spokemon", "Shiny Pokémon",
choices = c("select a pokémon..." = "", pokemon$Name)),
uiOutput("shinyimage"))
),
),
tabPanel("Data Table", dataTableOutput("dynamic"))
)))
runApp()
theme = bs_theme(version = version_default(), "vapor")
ui <- fluidPage(
theme = bs_theme(version = version_default(), "vapor"),
titlePanel("Generation I Pokédex"),
img(src = "charmeleon.gif", height = 100, width = 100),
img(src = "pikarun.gif", height = 100, width = 100),
img(src = "bulbasaur.gif", height = 100, width = 100),
mainPanel(
tabsetPanel(type = "tab",
tabPanel("Welcome!",
uiOutput("markdown"),
img(src = "pikachu.png", align = "bottom", height = 100, width = 100)),
tabPanel("Poké-Plots",
sidebarPanel(
selectInput("xcol", "X Variable", choices = names(pokemon)),
selectInput("ycol", "Y Variable", choices = names(pokemon)),
),
plotlyOutput(outputId = "scatterplots")
),
tabPanel("Poké-Pics",
fluidRow(
column(5,
selectInput("ppokemon", "Normal Pokémon",
choices = c("select a pokémon..." = "", pokemon$Name)),
uiOutput("normalimage")),
column(5,
selectInput("spokemon", "Shiny Pokémon",
choices = c("select a pokémon..." = "", pokemon$Name)),
uiOutput("shinyimage"))
),
),
tabPanel("Data Table", dataTableOutput("dynamic"))
)))
runApp()
library(tidyverse)
library(rvest)
library(repurrrsive)
library(shiny)
library(shinyWidgets)
library(plotly)
library(bslib)
library(markdown)
Link <- "https://pokemondb.net/pokedex/stats/gen1"
page = read_html(Link)
Name = page%>% html_nodes(".cell-name")%>%
html_text()
page = read_html(Link)
Type = page%>% html_nodes(".cell-icon")%>%
html_text()
page = read_html(Link)
Total = page%>% html_nodes(".cell-total")%>%
html_text()
page = read_html(Link)
Attack = page%>% html_nodes(".cell-num:nth-child(6)")%>%
html_text()
page = read_html(Link)
Defense = page%>% html_nodes(".cell-num:nth-child(7)")%>%
html_text()
page = read_html(Link)
Speed = page%>% html_nodes(".cell-num:nth-child(10)")%>%
html_text()
page = read_html(Link)
SpAtk = page %>% html_nodes(".cell-num:nth-child(8)")%>%
html_text()
page = read_html(Link)
SpDef = page %>% html_nodes(".cell-num:nth-child(9)")%>%
html_text()
pokemondataframe_g1 = data.frame(Name, Type, Total, Attack, Defense, SpAtk, SpDef, Speed)
as_tibble(pokemondataframe_g1)
#recode character variables to doubles because they are continuous, numerical variables
pokemon_df_clean <- pokemondataframe_g1 %>%
mutate(Total = as.numeric(Total),
Attack = as.numeric(Attack),
Defense = as.numeric(Defense),
Speed = as.numeric(Speed),
SpAtk = as.numeric(SpAtk),
SpDef = as.numeric(SpDef))
#parse pokemon with two types into two columns
pokemon_df_clean$Type <- gsub("(?!^)(?=[[:upper:]])", ".", pokemon_df_clean$Type, perl=T)
pokemon <- pokemon_df_clean %>% separate(Type, c("Primary_Type", "Secondary_Type"), extra = "merge", fill = "right")
#recode the types as factors so ggplot will read them correctly
pokemontypes <- c("Grass", "Poison", "Fire", "Flying", "Water", "Bug", "Normal", "Electric", "Ground", "Fighting", "Fairy", "Psychic", "Rock", "Steel", "Ice", "Ghost", "Dragon")
pokemon$Primary_Type <- factor(pokemon$Primary_Type, levels = pokemontypes)
pokemon$Secondary_Type <- factor(pokemon$Secondary_Type, levels = pokemontypes)
ID_no <- c(1:151)
ID <- formatC(ID_no, width = 3, format = "d", flag = "0")
pokemon$ID <- ID
pokemon$Name <- tolower(pokemon$Name)
pokemon
runApp()
Link <- "https://pokemondb.net/pokedex/stats/gen1"
page = read_html(Link)
Name = page%>% html_nodes(".cell-name")%>%
html_text()
page = read_html(Link)
Type = page%>% html_nodes(".cell-icon")%>%
html_text()
page = read_html(Link)
Total = page%>% html_nodes(".cell-total")%>%
html_text()
page = read_html(Link)
Attack = page%>% html_nodes(".cell-num:nth-child(6)")%>%
html_text()
page = read_html(Link)
Defense = page%>% html_nodes(".cell-num:nth-child(7)")%>%
html_text()
page = read_html(Link)
Speed = page%>% html_nodes(".cell-num:nth-child(10)")%>%
html_text()
page = read_html(Link)
SpAtk = page %>% html_nodes(".cell-num:nth-child(8)")%>%
html_text()
page = read_html(Link)
SpDef = page %>% html_nodes(".cell-num:nth-child(9)")%>%
html_text()
pokemondataframe_g1 = data.frame(Name, Type, Total, Attack, Defense, SpAtk, SpDef, Speed)
as_tibble(pokemondataframe_g1)
#recode character variables to doubles because they are continuous, numerical variables
pokemon_df_clean <- pokemondataframe_g1 %>%
mutate(Total = as.numeric(Total),
Attack = as.numeric(Attack),
Defense = as.numeric(Defense),
Speed = as.numeric(Speed),
SpAtk = as.numeric(SpAtk),
SpDef = as.numeric(SpDef))
#parse pokemon with two types into two columns
pokemon_df_clean$Type <- gsub("(?!^)(?=[[:upper:]])", ".", pokemon_df_clean$Type, perl=T)
pokemon <- pokemon_df_clean %>% separate(Type, c("Primary_Type", "Secondary_Type"), extra = "merge", fill = "right")
#recode the types as factors so ggplot will read them correctly
pokemontypes <- c("Grass", "Poison", "Fire", "Flying", "Water", "Bug", "Normal", "Electric", "Ground", "Fighting", "Fairy", "Psychic", "Rock", "Steel", "Ice", "Ghost", "Dragon")
pokemon$Primary_Type <- factor(pokemon$Primary_Type, levels = pokemontypes)
pokemon$Secondary_Type <- factor(pokemon$Secondary_Type, levels = pokemontypes)
ID_no <- c(1:151)
ID <- formatC(ID_no, width = 3, format = "d", flag = "0")
pokemon$ID <- ID
pokemon1 <- pokemon
pokemon$Name <- tolower(pokemon$Name)
pokemon
View(pokemon1)
runApp()
runApp()
runGitHub("RShinyProject", "epidemiologist")
runGitHub("<RShinyProject>", "<epidemiologist>")
runGitHub("RShinyProject", "epidemiologist")
runGitHub("RShinyProject", "epidemiologist")
runGitHub("RShinyProject", "epidemiologist")
runGitHub("RShinyProject", "epidemiologist")
